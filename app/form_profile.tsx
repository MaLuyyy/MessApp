import InputField from "@/components/InputField";
import { useRouter } from "expo-router";
import { collection, doc, getDocs, query, setDoc, where } from "firebase/firestore";
import { useEffect, useState } from "react";
import { Alert, SafeAreaView, StyleSheet, Text, TouchableOpacity } from "react-native";
import DateTimePickerModal from "react-native-modal-datetime-picker";
import Toast from 'react-native-toast-message';
import { auth, db } from "../lib/firebaseConfig";

export default function FormInfoScreen(){
    const router = useRouter();
    const [username, setUsername] = useState("");
    const [fullname, setFullname] = useState("");
    const [numberphone, setNumberphone] = useState("");
    const [birthday, setBirthday] = useState("");
    const [isDatePickerVisible, setDatePickerVisibility] = useState(false);
    const [loading, setLoading] = useState(false);

    // Debug logging
    useEffect(() => {
        console.log("=== FORM PROFILE DEBUG ===");
        console.log("Current user:", auth.currentUser?.uid);
        console.log("Auth state:", auth.currentUser ? "logged in" : "logged out");
        
        if (!auth.currentUser) {
            console.log("No user found, redirecting to sign_in");
            router.replace("/sign_in");
        }
    }, []);

    const handleConfirm = (date: Date) => {
        setBirthday(date.toISOString().split("T")[0]); // yyyy-mm-dd
        setDatePickerVisibility(false);
    };

    const handleSave = async () => {
        if (loading) return;

        try {
            const user = auth.currentUser;
            if (!user) {
                Alert.alert("L·ªói", "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p");
                return;
            }

            // ‚úÖ Validate d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i l√™n Firestore
            if (!username || !fullname || !numberphone || !birthday) {
                Alert.alert("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin");
                return;
            }

            // Username: ch·ªâ cho ph√©p ch·ªØ + s·ªë, d√†i √≠t nh·∫•t 3 k√Ω t·ª±
            const usernameRegex = /^[a-zA-Z0-9_]{3,}$/;
            if (!usernameRegex.test(username)) {
                Alert.alert("L·ªói", "Username ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ, s·ªë, d·∫•u g·∫°ch d∆∞·ªõi v√† t·ªëi thi·ªÉu 3 k√Ω t·ª±");
                return;
            }

            // Fullname: ch·ªâ ch·ª©a ch·ªØ (c√≥ d·∫•u) v√† kho·∫£ng tr·∫Øng
            const fullnameRegex = /^[\p{L}\s]+$/u;
            if (!fullnameRegex.test(fullname)) {
                Alert.alert("L·ªói", "H·ªç v√† t√™n ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i v√† kho·∫£ng tr·∫Øng");
                return;
            }

            // S·ªë ƒëi·ªán tho·∫°i VN: 10 s·ªë, b·∫Øt ƒë·∫ßu b·∫±ng 0
            const phoneRegex = /^(0\d{9}|(\+84)\d{9})$/;
            if (!phoneRegex.test(numberphone)) {
                Alert.alert("L·ªói", "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá (VD: 0912345678 ho·∫∑c +84912345678)");
                return;
            }

            setLoading(true);

             // üîç Ki·ªÉm tra username c√≥ b·ªã tr√πng kh√¥ng
            const usernameQuery = query(
                collection(db, "users"),
                where("username", "==", username)
            );
            const usernameSnapshot = await getDocs(usernameQuery);

            if (!usernameSnapshot.empty) {
                const existsOther = usernameSnapshot.docs.some(doc => doc.id !== user.uid);
                if (existsOther) {
                    Alert.alert("L·ªói", "T√™n ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng");
                    setLoading(false);
                    return;
                }
            }

            // üîç Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i c√≥ b·ªã tr√πng kh√¥ng
            const phoneQuery = query(
                collection(db, "users"),
                where("numberphone", "==", numberphone)
            );
            const phoneSnapshot = await getDocs(phoneQuery);

            if (!phoneSnapshot.empty) {
                const existsOther = phoneSnapshot.docs.some(doc => doc.id !== user.uid);
                if (existsOther) {
                    Alert.alert("L·ªói", "S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng");
                    setLoading(false);
                    return;
                }
            }


            try {
                // L∆∞u th√¥ng tin v·ªõi merge: true ƒë·ªÉ gi·ªØ l·∫°i data c≈©
                console.log("Saving user profile...");
                await setDoc(doc(db, "users", user.uid), {
                    username,
                    fullname,
                    numberphone,
                    birthday,
                    updatedAt: new Date(),
                }, { merge: true });

                Toast.show({
                    type: 'success',
                    text1: 'Th√†nh c√¥ng',
                    text2: 'L∆∞u th√¥ng tin th√†nh c√¥ng',
                    position: 'bottom',
                    visibilityTime: 3000,
                });

                // Redirect v·ªÅ home sau 1 gi√¢y
                setTimeout(() => {
                    router.replace("/home");
                }, 1000);

            } catch (firestoreError: any) {
                console.error("Firestore error:", firestoreError);
                
                if (firestoreError.code === 'permission-denied') {
                    Alert.alert("L·ªói", "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
                    // C√≥ th·ªÉ logout user v√† redirect v·ªÅ sign_in
                    await auth.signOut();
                    router.replace("/sign_in");
                } else {
                    Alert.alert("L·ªói", "Kh√¥ng th·ªÉ l∆∞u th√¥ng tin: " + firestoreError.message);
                }
            }

        } catch (error: any) {
            console.error("General error:", error);
            Alert.alert("L·ªói", error.message || "C√≥ l·ªói x·∫£y ra");
        } finally {
            setLoading(false);
        }
    };

    return(
        <SafeAreaView style={styles.container}>
            <Text style={styles.title}>Th√¥ng tin c√° nh√¢n</Text>

            <InputField 
                icon="user" 
                placeholder="T√™n ng∆∞·ªùi d√πng" 
                value={username} 
                onChangeText={setUsername}
                editable={!loading}
            />
            <InputField 
                icon="users" 
                placeholder="H·ªç v√† T√™n" 
                value={fullname} 
                onChangeText={setFullname}
                editable={!loading}
            />
            <InputField 
                icon="phone" 
                placeholder="S·ªë ƒëi·ªán tho·∫°i" 
                value={numberphone} 
                onChangeText={setNumberphone}
                editable={!loading}
            />

            <TouchableOpacity 
                onPress={() => setDatePickerVisibility(true)}
                disabled={loading}
            >
                <InputField 
                    icon="calendar" 
                    placeholder="Ng√†y sinh" 
                    value={birthday} 
                    editable={false} 
                />
            </TouchableOpacity>

            <DateTimePickerModal
                isVisible={isDatePickerVisible}
                mode="date"
                onConfirm={handleConfirm}
                onCancel={() => setDatePickerVisibility(false)}
                maximumDate={new Date()} // Kh√¥ng cho ch·ªçn ng√†y t∆∞∆°ng lai
            />

            <TouchableOpacity 
                style={[styles.button, loading && styles.buttonDisabled]} 
                onPress={handleSave}
                disabled={loading}
            >
                <Text style={styles.buttonText}>
                    {loading ? "ƒêANG L∆ØU..." : "X√ÅC NH·∫¨N TH√îNG TIN"}
                </Text>
            </TouchableOpacity>
        </SafeAreaView>
    );    
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        paddingHorizontal: 24,
        justifyContent: 'center',
        backgroundColor: '#fff',
    },
    title: {
        fontSize: 22,
        fontWeight: '600',
        textAlign: 'center',
        marginBottom: 40,
        color: '#593C1F',
    },
    button: {
        backgroundColor: '#FDB813',
        padding: 15,
        borderRadius: 30,
        alignItems: 'center',
        marginTop: 20,
        shadowColor: '#FDB813',
        shadowOpacity: 0.3,
        shadowOffset: { width: 0, height: 10 },
        shadowRadius: 10,
    },
    buttonDisabled: {
        backgroundColor: '#cccccc',
        shadowOpacity: 0,
    },
    buttonText: {
        color: '#fff',
        fontWeight: 'bold',
    },
});